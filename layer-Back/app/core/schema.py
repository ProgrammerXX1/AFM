import weaviate
from weaviate import WeaviateClient
from weaviate.connect import ConnectionParams
from weaviate.classes.init import AdditionalConfig, Timeout
from weaviate.classes.config import Property, DataType, Configure, ReferenceProperty

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
client = WeaviateClient(
    connection_params=ConnectionParams.from_params(
        http_host="localhost",
        http_port=8080,
        http_secure=False,
        grpc_host="localhost",
        grpc_port=50051,
        grpc_secure=False
    ),
    additional_config=AdditionalConfig(grpc=True, timeout=Timeout(init=10)),
    skip_init_checks=True
)

def drop_if_exists(name: str):
    if client.collections.exists(name):
        client.collections.delete(name)
        print(f"üßπ –°—Ç–∞—Ä–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è '{name}' —É–¥–∞–ª–µ–Ω–∞.")

try:
    client.connect()

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    for name in ["Document","Chunk","Entity","Event","Evidence","Case","ActionItem"]:
        drop_if_exists(name)

    
    client.collections.create(
    name="Case",
    vectorizer_config=Configure.Vectorizer.text2vec_openai(),
    properties=[
        Property(name="caseId", data_type=DataType.TEXT, index_inverted=True),
        Property(name="title", data_type=DataType.TEXT),
        Property(name="jurisdiction", data_type=DataType.TEXT),   # e.g. "KZ"
        Property(name="status", data_type=DataType.TEXT),          # intake/review/qualified/closed
        Property(name="createdAt", data_type=DataType.DATE),
        Property(name="updatedAt", data_type=DataType.DATE),
        Property(name="ownerUserId", data_type=DataType.TEXT, index_inverted=True),
    ]
)
    print("‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è 'Case' —Å–æ–∑–¥–∞–Ω–∞.")

    client.collections.create(
    name="Document",
    vectorizer_config=Configure.Vectorizer.text2vec_openai(),
    properties=[
        Property(name="docId", data_type=DataType.TEXT, index_inverted=True),
        Property(name="caseId", data_type=DataType.TEXT, index_inverted=True),
        Property(name="userId", data_type=DataType.TEXT, index_inverted=True),

        Property(name="title", data_type=DataType.TEXT),
        Property(name="type", data_type=DataType.TEXT),            # protocol/report/order/conclusion/...
        Property(name="sourceType", data_type=DataType.TEXT),      # upload/email/scan
        Property(name="sourcePath", data_type=DataType.TEXT),
        Property(name="mime", data_type=DataType.TEXT),
        Property(name="lang", data_type=DataType.TEXT),

        Property(name="fileSize", data_type=DataType.INT),
        Property(name="docHash", data_type=DataType.TEXT),         # –∑–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä–æ–µ 'hash'
        Property(name="checksum", data_type=DataType.TEXT),        # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ–º

        Property(name="createdAt", data_type=DataType.DATE),
        Property(name="receivedAt", data_type=DataType.DATE),
        Property(name="pages", data_type=DataType.INT),
    ],
    references=[
        ReferenceProperty(name="inCase", target_collection="Case"),
    ]
)
    print("‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è 'Document' —Å–æ–∑–¥–∞–Ω–∞.")

    client.collections.create(
    name="Chunk",
    vectorizer_config=Configure.Vectorizer.text2vec_openai(),
    properties=[
        Property(name="chunkId", data_type=DataType.TEXT, index_inverted=True),
        Property(name="caseId", data_type=DataType.TEXT, index_inverted=True),
        Property(name="docId", data_type=DataType.TEXT, index_inverted=True),

        Property(name="pageStart", data_type=DataType.INT),
        Property(name="pageEnd", data_type=DataType.INT),

        Property(name="position", data_type=DataType.INT),         # –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        Property(name="chunkType", data_type=DataType.TEXT),       # header/body/table/footnote/appendix
        Property(name="chunkSubtype", data_type=DataType.TEXT),    # —Ä–∞–ø–æ—Ä—Ç/–ø—Ä–æ—Ç–æ–∫–æ–ª/–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ/...
        Property(name="section", data_type=DataType.TEXT),         # –∫—Ä—É–ø–Ω—ã–π —Ä–∞–∑–¥–µ–ª (–µ—Å–ª–∏ –µ—Å—Ç—å)
        Property(name="stage", data_type=DataType.TEXT),           # –¥–æ—Å–ª–µ–¥—Å—Ç./–¥–æ—Å—É–¥–µ–±./—Å—É–¥

        Property(name="text", data_type=DataType.TEXT),
        Property(name="tokens", data_type=DataType.INT),

        Property(name="legalRefs", data_type=DataType.TEXT_ARRAY), # —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ—Ä–º—ã –ø—Ä–∞–≤–∞, —Å—Ç–∞—Ç—å–∏
        Property(name="semanticHash", data_type=DataType.TEXT),
        Property(name="confidence", data_type=DataType.NUMBER),
        Property(name="salience", data_type=DataType.NUMBER),
    ],
    references=[
        ReferenceProperty(name="ofDocument", target_collection="Document"),
        ReferenceProperty(name="inCase", target_collection="Case"),
    ]
)
    print("‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è 'Chunk' —Å–æ–∑–¥–∞–Ω–∞.")
 
    client.collections.create(
    name="Entity",
    vectorizer_config=Configure.Vectorizer.text2vec_openai(),
    properties=[
        Property(name="entityId", data_type=DataType.TEXT, index_inverted=True),
        Property(name="caseId", data_type=DataType.TEXT, index_inverted=True),

        Property(name="entityType", data_type=DataType.TEXT),      # PERSON/ORG/LAW_REF/ARTICLE/MONEY/...
        Property(name="name", data_type=DataType.TEXT),
        Property(name="normalized", data_type=DataType.TEXT),      # –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞
        Property(name="source", data_type=DataType.TEXT),          # ner/spacy/regex/llm
        Property(name="extra", data_type=DataType.TEXT),           # JSON string (attrs)
        Property(name="confidence", data_type=DataType.NUMBER),
    ],
    references=[
        ReferenceProperty(name="mentionedIn", target_collection="Chunk"),
        ReferenceProperty(name="inCase", target_collection="Case"),
    ]
)
    print("‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è 'Entity' —Å–æ–∑–¥–∞–Ω–∞.")

    client.collections.create(
    name="Event",
    vectorizer_config=Configure.Vectorizer.text2vec_openai(),
    properties=[
        Property(name="eventId", data_type=DataType.TEXT, index_inverted=True),
        Property(name="caseId", data_type=DataType.TEXT, index_inverted=True),

        Property(name="eventType", data_type=DataType.TEXT),       # search/seizure/transfer/payment/...
        Property(name="who", data_type=DataType.TEXT),
        Property(name="when", data_type=DataType.TEXT),            # –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç/–¥–∞—Ç–∞
        Property(name="eventTimeStart", data_type=DataType.DATE),  # ISO –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        Property(name="eventTimeEnd", data_type=DataType.DATE),

        Property(name="where", data_type=DataType.TEXT),
        Property(name="amount", data_type=DataType.NUMBER),
        Property(name="currency", data_type=DataType.TEXT),

        Property(name="details", data_type=DataType.TEXT),
        Property(name="lawRefs", data_type=DataType.TEXT_ARRAY),   # —Å—Ç–∞—Ç—å–∏/–Ω–æ—Ä–º—ã
        Property(name="confidence", data_type=DataType.NUMBER),
    ],
    references=[
        ReferenceProperty(name="entities", target_collection="Entity"),
        ReferenceProperty(name="evidenceFrom", target_collection="Chunk"),  # –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç–µ–∫—Å—Ç–∞
        ReferenceProperty(name="inCase", target_collection="Case"),
    ]
)
    print("‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è 'Event' —Å–æ–∑–¥–∞–Ω–∞.")

    client.collections.create(
    name="Evidence",
    vectorizer_config=Configure.Vectorizer.text2vec_openai(),
    properties=[
        Property(name="evidenceId", data_type=DataType.TEXT, index_inverted=True),
        Property(name="caseId", data_type=DataType.TEXT, index_inverted=True),

        Property(name="kind", data_type=DataType.TEXT),            # table/photo/scan/attachment/...
        Property(name="description", data_type=DataType.TEXT),
        Property(name="location", data_type=DataType.TEXT),        # –ø—É—Ç—å/URI
        Property(name="pageRefs", data_type=DataType.INT_ARRAY),   # —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        Property(name="fileRef", data_type=DataType.TEXT),         # —Å–≤—è–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª (–µ—Å–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ)
        Property(name="hashRef", data_type=DataType.TEXT),
        Property(name="confidence", data_type=DataType.NUMBER),
    ],
    references=[
        ReferenceProperty(name="supportsEvent", target_collection="Event"),
        ReferenceProperty(name="supportsChunk", target_collection="Chunk"),
        ReferenceProperty(name="inCase", target_collection="Case"),
    ]
)
    print("‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è 'Evidence' —Å–æ–∑–¥–∞–Ω–∞.")

    client.collections.create(
    name="ActionItem",
    vectorizer_config=Configure.Vectorizer.text2vec_openai(),
    properties=[
        Property(name="actionId", data_type=DataType.TEXT, index_inverted=True),
        Property(name="caseId", data_type=DataType.TEXT, index_inverted=True),

        Property(name="category", data_type=DataType.TEXT),        # evidence/request/analysis/...
        Property(name="text", data_type=DataType.TEXT),
        Property(name="priority", data_type=DataType.INT),         # 1..5
        Property(name="status", data_type=DataType.TEXT),          # open/in_progress/done
        Property(name="ownerUserId", data_type=DataType.TEXT),
        Property(name="dueDate", data_type=DataType.DATE),
    ],
    references=[
        ReferenceProperty(name="relatedEvent", target_collection="Event"),
        ReferenceProperty(name="relatedChunk", target_collection="Chunk"),
        ReferenceProperty(name="relatedEntity", target_collection="Entity"),
        ReferenceProperty(name="inCase", target_collection="Case"),
    ]
)
    print("‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è 'ActionItem' —Å–æ–∑–¥–∞–Ω–∞.")

    client.collections.create(
    name="Qualification",
    vectorizer_config=Configure.Vectorizer.text2vec_openai(),
    properties=[
        Property(name="qualificationId", data_type=DataType.TEXT, index_inverted=True),
        Property(name="caseId", data_type=DataType.TEXT, index_inverted=True),

        Property(name="charges", data_type=DataType.TEXT_ARRAY),   # —Å—Ç–∞—Ç. –£–ö/–£–ü–ö –∏ —Ç.–ø.
        Property(name="summary", data_type=DataType.TEXT),         # –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
        Property(name="rationale", data_type=DataType.TEXT),       # –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
        Property(name="confidence", data_type=DataType.NUMBER),
        Property(name="createdAt", data_type=DataType.DATE),
        Property(name="updatedAt", data_type=DataType.DATE),
    ],
    references=[
        ReferenceProperty(name="basedOnEvents", target_collection="Event"),
        ReferenceProperty(name="basedOnEvidence", target_collection="Evidence"),
        ReferenceProperty(name="inCase", target_collection="Case"),
    ]
)
    print("‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è 'Qualification' —Å–æ–∑–¥–∞–Ω–∞.")

    client.collections.create(
    name="MissingItem",
    vectorizer_config=Configure.Vectorizer.text2vec_openai(),
    properties=[
        Property(name="missingId", data_type=DataType.TEXT, index_inverted=True),
        Property(name="caseId", data_type=DataType.TEXT, index_inverted=True),

        Property(name="itemType", data_type=DataType.TEXT),        # expert_conclusion/warrant/...
        Property(name="description", data_type=DataType.TEXT),
        Property(name="severity", data_type=DataType.INT),         # 1..5
        Property(name="status", data_type=DataType.TEXT),          # missing/requested/received
        Property(name="createdAt", data_type=DataType.DATE),
        Property(name="updatedAt", data_type=DataType.DATE),
    ],
    references=[
        ReferenceProperty(name="inCase", target_collection="Case"),
        ReferenceProperty(name="relatedEvent", target_collection="Event"),
    ]
)
    print("‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è 'MissingItem' —Å–æ–∑–¥–∞–Ω–∞.")



except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
finally:
    client.close()
    print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.")
