from app.core.weaviate_client import client
import logging

logger = logging.getLogger(__name__)

def clear_weaviate_documents():
    """–£–¥–∞–ª—è–µ—Ç –í–°–ï –æ–±—ä–µ–∫—Ç—ã –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ 'Document' –ø–æ UUID."""
    try:
        if not client.is_connected():
            logger.info("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Weaviate...")
            client.connect()

        collection = client.collections.get("Document")

        logger.info("üì• –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏...")
        all_objects = collection.query.fetch_objects(limit=9999)

        if not all_objects.objects:
            logger.info("‚ÑπÔ∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è —É–∂–µ –ø—É—Å—Ç–∞.")
            return 0

        deleted_count = 0
        for obj in all_objects.objects:
            try:
                collection.data.delete_by_id(obj.uuid)
                logger.info(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω: {obj.uuid}")
                deleted_count += 1
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {obj.uuid}: {e}")

        logger.info(f"‚úÖ –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ: {deleted_count}")
        return deleted_count

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ Weaviate: {e}")
        return 0


if __name__ == "__main__":
    deleted = clear_weaviate_documents()
    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {deleted}")