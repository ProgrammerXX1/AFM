# app/core/weaviate_client.py
from __future__ import annotations

import os
import uuid
import atexit
import logging
from typing import Optional, List

from weaviate import WeaviateClient
from weaviate.connect import ConnectionParams
from weaviate.classes.init import AdditionalConfig, Timeout
from weaviate.classes.config import Configure, Property, DataType, VectorDistances

logger = logging.getLogger(__name__)

# -----------------------------
# –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
# -----------------------------
_CLIENT: Optional[WeaviateClient] = None

def _str_to_bool(value: str) -> bool:
    return str(value).lower() in ("true", "1", "yes", "y")

def _build_client() -> WeaviateClient:
    return WeaviateClient(
        connection_params=ConnectionParams.from_params(
            http_host=os.getenv("WEAVIATE_HTTP_HOST", "localhost"),
            http_port=int(os.getenv("WEAVIATE_HTTP_PORT", 8080)),
            http_secure=_str_to_bool(os.getenv("WEAVIATE_HTTP_SECURE", "false")),
            grpc_host=os.getenv("WEAVIATE_GRPC_HOST", "localhost"),
            grpc_port=int(os.getenv("WEAVIATE_GRPC_PORT", 50051)),
            grpc_secure=_str_to_bool(os.getenv("WEAVIATE_GRPC_SECURE", "false")),
        ),
        additional_config=AdditionalConfig(
            grpc=True,
            timeout=Timeout(init=10)
        ),
        skip_init_checks=True,
    )

def get_client() -> WeaviateClient:
    """–í–µ—Ä–Ω—É—Ç—å singleton –∫–ª–∏–µ–Ω—Ç–∞ (–±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)."""
    global _CLIENT
    if _CLIENT is None:
        _CLIENT = _build_client()
    return _CLIENT

def connect() -> None:
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)."""
    c = get_client()
    if not c.is_connected():
        logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Weaviate...")
        c.connect()

def is_connected() -> bool:
    c = get_client()
    try:
        return c.is_connected()
    except Exception:
        return False

def close_client() -> None:
    """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)."""
    global _CLIENT
    if _CLIENT is None:
        return
    try:
        if _CLIENT.is_connected():
            logger.info("üßπ –ó–∞–∫—Ä—ã–≤–∞–µ–º Weaviate-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
            _CLIENT.close()
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ Weaviate: {e}")
    # –ù–µ –æ–±–Ω—É–ª—è–µ–º _CLIENT, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –≤—ã–∑–æ–≤—ã –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≤ atexit
    # –ï—Å–ª–∏ —Ö–æ—á–µ—Ç—Å—è ‚Äî –º–æ–∂–Ω–æ –æ–±–Ω—É–ª–∏—Ç—å: _CLIENT = None

# –ù–∞ —Å–ª—É—á–∞–π ¬´–∂—ë—Å—Ç–∫–æ–≥–æ¬ª –≤—ã—Ö–æ–¥–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–µ–∑ shutdown-—Å–æ–±—ã—Ç–∏—è
atexit.register(close_client)

# -------------------------------------------------
# –°—Ö–µ–º–∞ –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç –ª–µ–Ω–∏–≤—ã–π singleton)
# -------------------------------------------------
def ensure_schema() -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã 'Document' –≤ Weaviate."""
    connect()
    try:
        existing = get_client().collections.list_all()
        if "Document" not in existing:
            get_client().collections.create(
                name="Document",
                properties=[
                    Property(name="title", data_type=DataType.TEXT),
                    Property(name="text", data_type=DataType.TEXT),
                    Property(name="filetype", data_type=DataType.TEXT),
                    Property(name="case_id", data_type=DataType.INT),
                    Property(name="document_id", data_type=DataType.INT),
                    Property(name="user_id", data_type=DataType.INT),
                    Property(name="chunk_type", data_type=DataType.TEXT),
                    Property(name="chunk_subtype", data_type=DataType.TEXT),
                    Property(name="source_page", data_type=DataType.INT),
                    Property(name="confidence", data_type=DataType.NUMBER),
                    Property(name="hash", data_type=DataType.TEXT),
                ],
                vectorizer_config=Configure.Vectorizer.none(),
                vector_index_config=Configure.VectorIndex.hnsw(
                    distance_metric=VectorDistances.COSINE,
                    vector_length=768,
                ),
            )
            logger.info("‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è Document —Å–æ–∑–¥–∞–Ω–∞")
        else:
            logger.info("‚ÑπÔ∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è Document —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ö–µ–º—ã: {str(e)}")
        raise

def save_to_weaviate(
    title: str,
    text: str,
    filetype: str,
    case_id: int,
    vector: List[float],
    document_id: int,
    user_id: int,
    chunk_type: str,
    confidence: float,
    hash: str,
    chunk_subtype: str | None = None,
    source_page: int | None = None,
) -> str:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–∞–Ω–∫–∞ –≤ Weaviate —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏."""
    connect()
    try:
        doc_uuid = str(uuid.uuid4())
        collection = get_client().collections.get("Document")

        properties = {
            "title": title,
            "text": text,
            "filetype": filetype,
            "case_id": case_id,
            "document_id": document_id,
            "user_id": user_id,
            "chunk_type": chunk_type,
            "confidence": confidence,
            "hash": hash,
        }
        if chunk_subtype:
            properties["chunk_subtype"] = chunk_subtype
        if source_page is not None:
            properties["source_page"] = source_page

        collection.data.insert(
            uuid=doc_uuid,
            properties=properties,
            vector=vector,
        )

        logger.info(f"‚úÖ –ß–∞–Ω–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ Weaviate: UUID={doc_uuid}")
        return doc_uuid

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–∞–Ω–∫–∞ –≤ Weaviate: {str(e)}")
        raise
