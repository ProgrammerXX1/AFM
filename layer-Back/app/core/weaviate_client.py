import uuid
from app.security.security import User, get_current_user
from app.models.cases import DocumentModel, CaseModel
from app.db.database import get_db
from weaviate import WeaviateClient
from weaviate.connect import ConnectionParams
from weaviate.classes.init import AdditionalConfig, Timeout
from weaviate.classes.config import Configure, Property, DataType, VectorDistances
import logging
from weaviate.classes.query import Filter
from fastapi import HTTPException, Depends, Query
from sqlalchemy.orm import Session
logger = logging.getLogger(__name__)

client = WeaviateClient(
    connection_params=ConnectionParams.from_params(
        http_host="localhost",
        http_port=8080,
        http_secure=False,
        grpc_host="localhost",
        grpc_port=50051,
        grpc_secure=False
    ),
    additional_config=AdditionalConfig(
        grpc=True,
        timeout=Timeout(init=10)
    ),
    skip_init_checks=True
)

def ensure_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Weaviate."""
    if not client.is_connected():
        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Weaviate...")
        client.connect()

def initialize_weaviate():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Weaviate –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã."""
    try:
        ensure_connection()
        ensure_schema()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Weaviate: {str(e)}")
        raise

def ensure_schema():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã 'Document' –≤ Weaviate."""
    try:
        existing = client.collections.list_all()
        if "Document" not in existing:
            client.collections.create(
                name="Document",
                properties=[
                    Property(name="title", data_type=DataType.TEXT),
                    Property(name="text", data_type=DataType.TEXT),
                    Property(name="filetype", data_type=DataType.TEXT),
                    Property(name="case_id", data_type=DataType.INT),
                ],
                vectorizer_config=Configure.Vectorizer.none(),
                vector_index_config=Configure.VectorIndex.hnsw(
                    distance_metric=VectorDistances.COSINE,
                    vector_length=768
                )
            )
            logger.info("–ö–æ–ª–ª–µ–∫—Ü–∏—è Document —Å–æ–∑–¥–∞–Ω–∞")
        else:
            logger.info("–ö–æ–ª–ª–µ–∫—Ü–∏—è Document —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ö–µ–º—ã: {str(e)}")
        raise

def save_to_weaviate(title: str, text: str, filetype: str, case_id: int, vector: list[float], document_id: int | None = None) -> str:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–∞–Ω–∫–∞ –≤ Weaviate."""
    try:
        ensure_connection()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–ø–µ—Ä–∞—Ü–∏–µ–π
        doc_uuid = str(uuid.uuid4())
        collection = client.collections.get("Document")

        properties = {
            "title": title,
            "text": text,
            "filetype": filetype,
            "case_id": case_id,
            "document_id": document_id  
        }

        # üí° –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
        if document_id is not None:
            properties["document_id"] = document_id

        collection.data.insert(
            uuid=doc_uuid,
            properties=properties,
            vector=vector
        )

        logger.info(f"–ß–∞–Ω–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω —Å weaviate_id: {doc_uuid}")
        return doc_uuid

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–∞–Ω–∫–∞ –≤ Weaviate: {str(e)}")
        raise

def is_valid_uuid(val: str) -> bool:
    try:
        uuid.UUID(val)
        return True
    except:
        return False

def delete_document(
    document_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user),
):
    document = db.query(DocumentModel).join(CaseModel).filter(
        DocumentModel.id == document_id,
        CaseModel.user_id == current_user.id
    ).first()

    if not document:
        raise HTTPException(status_code=404, detail="–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤ –∏–∑ Weaviate –ø–æ document_id
    try:
        if not client.is_connected():
            client.connect()

        collection = client.collections.get("Document")

        # ‚ùó–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å where-—Ñ–∏–ª—å—Ç—Ä –¥–ª—è v4
        where_filter = Filter.by_property("document_id").equal(document.id)

        delete_result = collection.data.delete_many(where=where_filter)
        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —á–∞–Ω–∫–æ–≤ Weaviate: {delete_result['matches']}")

    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–∞–Ω–∫–æ–≤ –∏–∑ Weaviate: {e}")

    db.delete(document)
    db.commit()
    return {"message": "–î–æ–∫—É–º–µ–Ω—Ç –∏ —á–∞–Ω–∫–∏ —É–¥–∞–ª–µ–Ω—ã"}
