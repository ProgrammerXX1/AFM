import uuid
from weaviate import WeaviateClient
from weaviate.connect import ConnectionParams
from weaviate.classes.init import AdditionalConfig, Timeout
from weaviate.classes.config import Configure, Property, DataType, VectorDistances
import logging

logger = logging.getLogger(__name__)

client = WeaviateClient(
    connection_params=ConnectionParams.from_params(
        http_host="localhost",
        http_port=8080,
        http_secure=False,
        grpc_host="localhost",
        grpc_port=50051,
        grpc_secure=False
    ),
    additional_config=AdditionalConfig(
        grpc=True,
        timeout=Timeout(init=10)
    ),
    skip_init_checks=True
)

def ensure_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Weaviate."""
    if not client.is_connected():
        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Weaviate...")
        client.connect()

def initialize_weaviate():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Weaviate –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã."""
    try:
        ensure_connection()
        ensure_schema()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Weaviate: {str(e)}")
        raise

def ensure_schema():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã 'Document' –≤ Weaviate."""
    try:
        existing = client.collections.list_all()
        if "Document" not in existing:
            client.collections.create(
                name="Document",
                properties=[
                    Property(name="title", data_type=DataType.TEXT),
                    Property(name="text", data_type=DataType.TEXT),
                    Property(name="filetype", data_type=DataType.TEXT),
                    Property(name="case_id", data_type=DataType.INT),
                ],
                vectorizer_config=Configure.Vectorizer.none(),
                vector_index_config=Configure.VectorIndex.hnsw(
                    distance_metric=VectorDistances.COSINE,
                    vector_length=768
                )
            )
            logger.info("–ö–æ–ª–ª–µ–∫—Ü–∏—è Document —Å–æ–∑–¥–∞–Ω–∞")
        else:
            logger.info("–ö–æ–ª–ª–µ–∫—Ü–∏—è Document —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ö–µ–º—ã: {str(e)}")
        raise

def save_to_weaviate(title: str, text: str, filetype: str, case_id: int, vector: list[float]) -> str:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–∞–Ω–∫–∞ –≤ Weaviate."""
    try:
        ensure_connection()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–ø–µ—Ä–∞—Ü–∏–µ–π
        doc_uuid = str(uuid.uuid4())
        collection = client.collections.get("Document")
        collection.data.insert(
            uuid=doc_uuid,
            properties={
                "title": title,
                "text": text,
                "filetype": filetype,
                "case_id": case_id,
            },
            vector=vector
        )
        logger.info(f"–ß–∞–Ω–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω —Å weaviate_id: {doc_uuid}")
        return doc_uuid
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–∞–Ω–∫–∞ –≤ Weaviate: {str(e)}")
        raise

def delete_from_weaviate(weaviate_id: str) -> bool:
    """–£–¥–∞–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç –ø–æ UUID –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Weaviate."""
    try:
        if not client.is_connected():
            logger.info("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Weaviate...")
            client.connect()

        collection = client.collections.get("Document")
        collection.data.delete_by_id(weaviate_id)
        logger.info(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω –æ–±—ä–µ–∫—Ç —Å weaviate_id={weaviate_id}")
        return True

    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Weaviate: {str(e)}")
        return False