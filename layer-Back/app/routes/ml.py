from fastapi import APIRouter, Query, UploadFile, File, HTTPException, Depends
from sqlalchemy.orm import Session
from datetime import datetime, timezone
from typing import List, Optional
from pydantic import BaseModel, ConfigDict
import fitz  # PyMuPDF
import logging
import os
import httpx
from dotenv import load_dotenv
import tiktoken
from fastapi.responses import PlainTextResponse
from pathlib import Path
import re
from app.db.database import get_db
from app.security.security import get_current_user
from app.models.cases import CaseModel, DocumentModel
from app.models.user import User
from app.ml.Embed.pipeline import index_full_document, search_similar_chunks
from app.ml.Generation.generator import generate_investigation_plan

load_dotenv()

router = APIRouter()
logger = logging.getLogger(__name__)

# Pydantic-–º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
class DocumentResponse(BaseModel):
    id: int
    title: str
    filetype: str
    created_at: datetime
    content: str = ""

    model_config = ConfigDict(from_attributes=True)

class UploadResponse(BaseModel):
    message: str

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏
GENERATOR_MODEL = os.getenv("GENERATOR_MODEL")
GENERATOR_URL = os.getenv("GENERATOR_URL")
MODEL_ENCODING = "cl100k_base"  # –î–ª—è GPT-3/GPT-4 –º–æ–¥–µ–ª–µ–π

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
STORAGE_DIR = Path("storage/docs")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤
def count_tokens(text: str) -> int:
    encoding = tiktoken.get_encoding(MODEL_ENCODING)
    tokens = encoding.encode(text)
    return len(tokens)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–æ–≤

def clean_text(text: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞: —É–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫."""
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Ç–µ–∫—Å—Ç–∞
    text = text.strip()
    # –£–±–∏—Ä–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª–æ–≤ –ø–æ–¥—Ä—è–¥, –∑–∞–º–µ–Ω—è—è –∏—Ö –Ω–∞ –æ–¥–∏–Ω
    text = re.sub(r'\s+', ' ', text)
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã –¥–æ–∫—É–º–µ–Ω—Ç—ã —à–ª–∏ –ø–æ–¥—Ä—è–¥
    text = re.sub(r'(\n\s*)+', '\n', text)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –≤ –æ–¥–Ω—É
    return text

def extract_text(file: UploadFile, content: bytes) -> str:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞."""
    if file.content_type == "application/pdf":
        import fitz  # PyMuPDF
        with fitz.open(stream=content, filetype="pdf") as doc:
            return "\n".join(page.get_text() for page in doc)
    return content.decode("utf-8", errors="ignore")

def validate_case(case_id: int, user_id: int, db: Session) -> CaseModel:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–µ–ª–∞ –∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞."""
    case = db.query(CaseModel).filter(
        CaseModel.id == case_id,
        CaseModel.user_id == user_id
    ).first()
    if not case:
        raise HTTPException(status_code=404, detail="–î–µ–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    return case

@router.post("/cases/{case_id}/documents", response_model=UploadResponse)
async def upload_documents(
    case_id: int,
    files: List[UploadFile] = File(...),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –æ–¥–∏–Ω –æ–±—â–∏–π —Ñ–∞–π–ª."""
    case = validate_case(case_id, current_user.id, db)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    if len(case.documents) + len(files) > 100:
        raise HTTPException(status_code=400, detail="–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (100)")

    all_text = ""
    processed_files = 0
    documents = []

    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    doc_folder = STORAGE_DIR / str(case.id)
    doc_folder.mkdir(parents=True, exist_ok=True)

    # –ü—É—Ç—å –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    combined_txt_path = doc_folder / f"combined_documents_{case.id}.txt"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –æ–±—â–∏–π —Ñ–∞–π–ª
    if combined_txt_path.exists():
        logger.info(f"–§–∞–π–ª {combined_txt_path} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å.")
    else:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        for file in files:
            try:
                content = await file.read()
                text = extract_text(file, content)

                # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤
                cleaned_text = clean_text(text)

                # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î
                document = DocumentModel(
                    title=file.filename,
                    filetype=file.content_type,
                    created_at=datetime.now(timezone.utc),
                    case_id=case.id
                )
                db.add(document)
                db.flush()

                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –æ–±—â–∏–π —Ñ–∞–π–ª
                all_text += f"\n\n--- –î–æ–∫—É–º–µ–Ω—Ç: {file.filename} ---\n\n"
                all_text += cleaned_text

                documents.append(document)
                processed_files += 1

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file.filename}: {str(e)}")
                db.rollback()
                continue

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–∏–π —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            with open(combined_txt_path, "w", encoding="utf-8") as f:
                f.write(all_text)
            logger.info(f"–û–±—â–∏–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {combined_txt_path}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—â–µ–≥–æ —Ñ–∞–π–ª–∞: {str(e)}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—â–µ–≥–æ —Ñ–∞–π–ª–∞")

    try:
        db.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {str(e)}")
        db.rollback()
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î")

    return {"message": f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {processed_files} –∏–∑ {len(files)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ"}

@router.get("/cases/{case_id}/prompt")
async def generate_and_analyze_prompt(
    case_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –∏–∑ –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –≤ Ollama –∏–ª–∏ llama.cpp —Å–µ—Ä–≤–µ—Ä."""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–µ–ª–∞ –∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    case = validate_case(case_id, current_user.id, db)

    # –ü—É—Ç—å –∫ –æ–±—â–µ–º—É —Ñ–∞–π–ª—É
    combined_txt_path = STORAGE_DIR / str(case_id) / f"combined_documents_{case_id}.txt"

    if not combined_txt_path.exists():
        raise HTTPException(status_code=404, detail="–û–±—â–∏–π —Ñ–∞–π–ª —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    try:
        with open(combined_txt_path, "r", encoding="utf-8") as f:
            full_prompt = f.read().strip()
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ–±—â–∏–π —Ñ–∞–π–ª {combined_txt_path}: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ–±—â–µ–≥–æ —Ñ–∞–π–ª–∞")

    if not full_prompt:
        raise HTTPException(status_code=400, detail="–§–∞–π–ª—ã –ø—É—Å—Ç—ã –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–µ–∫—Å—Ç–∞")

    # –ü–æ–¥—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –≤ –ø—Ä–æ–º–ø—Ç–µ
    token_count = count_tokens(full_prompt)

    MAX_TOKENS = 32768  # –õ–∏–º–∏—Ç –¥–ª—è –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤
    if token_count > MAX_TOKENS:
        raise HTTPException(status_code=400, detail=f"–¢–æ–∫–µ–Ω–æ–≤ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ ({token_count}), –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç: {MAX_TOKENS}.")

    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –º–µ–Ω–µ–µ 200 —Å–ª–æ–≤
    instruction = """
    –¢—ã —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–µ–ª–∞ –∏ –≤—ã–¥–∞–π:
    - üìå –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏—è
    - üìé –°—Ç–∞—Ç—å—é –∏ —á–∞—Å—Ç—å –£–ö –†–ö
    - üõ† –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Å–ª–µ–¥—Å—Ç–≤–∏—è

    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 200 —Å–ª–æ–≤.
    """

    final_prompt = f"{full_prompt}\n\n{instruction.strip()}"

    try:
        async with httpx.AsyncClient(timeout=2400.0) as client:
            payload = {
                "model": GENERATOR_MODEL,
                "prompt": final_prompt,
                "n_predict": 1500,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
                "temperature": 0.7,
                "top_p": 0.9,
                "repeat_penalty": 1.1,
                "stream": False
            }
            response = await client.post(GENERATOR_URL, json=payload)
            response.raise_for_status()
            result = response.json()

            model_reply = result.get("content") or result.get("response") or result.get("text", "[–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç]")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        raise HTTPException(status_code=502, detail="–ú–æ–¥–µ–ª—å –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∞")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞ –Ω–∞ 200 —Å–ª–æ–≤
    word_count = len(model_reply.split())

    if word_count < 200:
        logger.warning(f"–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –º–µ–Ω—å—à–µ 200 —Å–ª–æ–≤: {word_count} —Å–ª–æ–≤. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
        # –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–∫–æ–π
        return {
            "case_id": case_id,
            "documents_included": 1,
            "documents_missing": [],
            "generator_model": GENERATOR_MODEL,
            "token_count": token_count,
            "result": f"–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ({word_count} —Å–ª–æ–≤), —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è."
        }

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–æ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
    return {
        "case_id": case_id,
        "documents_included": 1,  # –ü–æ—Å–∫–æ–ª—å–∫—É —Ç–µ–ø–µ—Ä—å —ç—Ç–æ –æ–¥–∏–Ω –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        "documents_missing": [],
        "generator_model": GENERATOR_MODEL,
        "token_count": token_count,  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç
        "result": model_reply.strip()
    }



@router.get("/cases/{case_id}/search_changs")
async def semantic_search(
    case_id: int,
    q: str = Query(..., description="–í–∞—à –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"),
    current_user: User = Depends(get_current_user)
):
    """–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º."""
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å: '{q}' –¥–ª—è –¥–µ–ª–∞ #{case_id}")
        results = search_similar_chunks(query=q, case_id=case_id, k=5)
        return {"results": results}
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/generate/qualification/{case_id}", response_class=PlainTextResponse)
async def generate_qualification(case_id: int):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏—è."""
    try:
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è case_id={case_id}")
        result = generate_investigation_plan(case_id)
        return result
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
