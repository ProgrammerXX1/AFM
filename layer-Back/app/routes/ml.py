from fastapi import APIRouter, Query, UploadFile, File, HTTPException, Depends
from sqlalchemy.orm import Session
from datetime import datetime
from typing import List
from pydantic import BaseModel, ConfigDict
import fitz  # PyMuPDF
import logging

from app.db.database import get_db
from app.security.security import get_current_user
from app.models.cases import CaseModel, DocumentModel
from app.models.user import User
from app.core.weaviate_client import ensure_schema, client
from app.ml.embedding_pipeline import index_full_document
from app.ml.embedding_pipeline import search_similar_chunks
from app.ml.pipeline import answer_query

router = APIRouter()
logger = logging.getLogger(__name__)

# Pydantic-–º–æ–¥–µ–ª—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ GET /cases/{case_id}/documents
class DocumentResponse(BaseModel):
    id: int
    title: str
    filetype: str
    created_at: datetime
    content: str = ""

    model_config = ConfigDict(from_attributes=True)

# Pydantic-–º–æ–¥–µ–ª—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ POST /cases/{case_id}/documents
class UploadResponse(BaseModel):
    message: str

def extract_text(file: UploadFile, content: bytes) -> str:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞."""
    if file.content_type == "application/pdf":
        with fitz.open(stream=content, filetype="pdf") as doc:
            return "\n".join(page.get_text() for page in doc)
    return content.decode("utf-8", errors="ignore")

def validate_case(case_id: int, user_id: int, db: Session) -> CaseModel:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–µ–ª–∞ –∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞."""
    case = db.query(CaseModel).filter(
        CaseModel.id == case_id,
        CaseModel.user_id == user_id
    ).first()
    if not case:
        raise HTTPException(status_code=404, detail="–î–µ–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    return case

@router.get("/cases/{case_id}/documents", response_model=List[DocumentResponse])
async def get_documents(
    case_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–µ–ª–∞."""
    case = validate_case(case_id, current_user.id, db)
    return case.documents

@router.post("/cases/{case_id}/documents", response_model=UploadResponse)
async def upload_documents(
    case_id: int,
    files: List[UploadFile] = File(...),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–µ–ª–∞ —Å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–µ–π –≤ Weaviate."""
    case = validate_case(case_id, current_user.id, db)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    doc_count = len(case.documents) if case.documents else 0
    if doc_count + len(files) > 100:
        raise HTTPException(status_code=400, detail="–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (100)")

    processed_files = 0
    documents = []
    for file in files:
        try:
            content = await file.read()
            text = extract_text(file, content)

            # –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –≤ Weaviate
            index_full_document(
                title=file.filename,
                text=text,
                filetype=file.content_type,
                case_id=case.id
            )

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ë–î
            document = DocumentModel(
                title=file.filename,
                filetype=file.content_type,
                created_at=datetime.utcnow(),
                case_id=case.id
            )
            documents.append(document)
            processed_files += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file.filename}: {str(e)}")
            continue

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ–¥–Ω–∏–º –∫–æ–º–º–∏—Ç–æ–º
    try:
        db.add_all(documents)
        db.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {str(e)}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î")

    return {"message": f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {processed_files} –∏–∑ {len(files)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ"}

@router.get("/cases/{case_id}/search")
async def semantic_search(
    case_id: int,
    q: str = Query(..., description="–í–∞—à –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"),
    current_user: User = Depends(get_current_user)
):
    try:
        logger.info(f"üîé –ó–∞–ø—Ä–æ—Å: '{q}' –¥–ª—è –¥–µ–ª–∞ #{case_id}")
        results = search_similar_chunks(query=q, case_id=case_id, k=10)
        return {"results": results}
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞")
        raise HTTPException(status_code=500, detail=str(e))

class QuestionRequest(BaseModel):
    question: str

class AnswerResponse(BaseModel):
    answer: str

@router.post("/ask/{case_id}", response_model=AnswerResponse)
async def ask(case_id: int, request: QuestionRequest):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ –¥–µ–ª—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º case_id.
    """
    try:
        answer = answer_query(case_id, request.question)
        return {"answer": answer}
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞")