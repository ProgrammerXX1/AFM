import os
import requests
from app.core.weaviate_client import client
from weaviate.classes.query import HybridFusion
EMBEDDER_URL = os.getenv("EMBEDDER_URL", "https://35966ecd792c.ngrok-free.app/api/embeddings")
EMBEDDER_MODEL = os.getenv("EMBEDDER_MODEL", "nomic-embed-text")
COLLECTION_NAME = "Norm"

# ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Weaviate
if not client.is_connected():
    client.connect()
collection = client.collections.get(COLLECTION_NAME)

# ‚úÖ –ü–æ–ª—É—á–∏—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞
def get_query_embedding(query: str):
    response = requests.post(
        EMBEDDER_URL,
        json={"model": EMBEDDER_MODEL, "prompt": query, "stream": False},
        timeout=10
    )
    response.raise_for_status()
    data = response.json()
    return data["embedding"] if "embedding" in data else data[0]["embedding"]

# ‚úÖ –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ (Weaviate SDK v4)
from weaviate.classes.query import Filter

def search_law(query: str, top_k: int = 5, chapter: str = None):
    # 1. –ü–æ–ª—É—á–∞–µ–º embedding
    vector = get_query_embedding(query)

    # 2. (–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) —Ñ–∏–ª—å—Ç—Ä –ø–æ –≥–ª–∞–≤–µ
    filters = None
    if chapter:
        filters = Filter.by_property("chapter").equal(chapter)

    # 3. –ó–∞–ø—Ä–æ—Å –≤ Weaviate
    results = collection.query.hybrid(
        query=query,
        alpha=0.5,  # 0.0 = —Ç–æ–ª—å–∫–æ BM25, 1.0 = —Ç–æ–ª—å–∫–æ vector, –ø–æ —É–º–æ–ª—á. 0.5
        vector=vector,
        filters=filters,
        limit=top_k
    ).objects

    # 4. –í—ã–≤–æ–¥
    for obj in results:
        props = obj.properties
        print(f"\nüìò –°—Ç–∞—Ç—å—è {props.get('article')} ‚Äî {props.get('chapter')}")
        print(f"üìå –¢–µ–∫—Å—Ç: {props.get('text')[:500]}...\n")

search_law("–ì–ª–∞–≤–∞ 2. –ó–∞–¥–∞—á–∏ –∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã —É–≥–æ–ª–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞")
