from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.openapi.utils import get_openapi
from fastapi.security import OAuth2PasswordBearer
from contextlib import asynccontextmanager
from dotenv import load_dotenv
import os
import logging
import warnings
from pathlib import Path

# ‚¨áÔ∏è DB/Alembic
from sqlalchemy import text
from sqlalchemy.exc import SQLAlchemyError
from app.db.database import Base, engine, SessionLocal
from alembic import command
from alembic.config import Config

# ‚¨áÔ∏è –ú–æ–¥–µ–ª–∏ (–µ—Å–ª–∏ —É —Ç–µ–±—è –¥—Ä—É–≥–∏–µ –ø—É—Ç–∏ ‚Äî –ø–æ–ø—Ä–∞–≤—å)
from app.models.user import User
from app.models.case import CaseModel

# ‚¨áÔ∏è –ü–∞—Ä–æ–ª–∏ –¥–ª—è —Å–∏–¥–∏–Ω–≥–∞
from passlib.context import CryptContext
pwd_ctx = CryptContext(schemes=["bcrypt"], deprecated="auto")

# ‚¨áÔ∏è –û—Å—Ç–∞–ª—å–Ω–æ–µ
from app.core.weaviate_client import initialize_weaviate
from app.routes import auth, cases, ml
from datetime import date

# üîß –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()

# ‚ö†Ô∏è –¢–∏—à–∏–º protobuf
warnings.filterwarnings("ignore", message="Protobuf gencode version .* is exactly one major version older.*")

# üîç –õ–æ–≥–∏
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# --------- –ú–∏–≥—Ä–∞—Ü–∏–∏ –∏ —Å–∏–¥–∏–Ω–≥ ---------

def run_migrations_or_create():
    """–°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–≥–Ω–∞—Ç—å Alembic, –µ—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ ‚Äî create_all."""
    db_url = os.getenv("DATABASE_URL")
    # –ø—Ä–æ–≤–µ—Ä–∏–º –∫–æ–Ω–Ω–µ–∫—Ç
    try:
        with engine.connect() as conn:
            conn.execute(text("SELECT 1"))
        logger.info("‚úÖ DB connection OK")
    except SQLAlchemyError as e:
        logger.exception("‚ùå DB connection failed")
        raise

    # –∫–æ–Ω—Ñ–∏–≥ Alembic
    # –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ /app ‚Äî –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
    project_root = Path(__file__).resolve().parents[1]
    alembic_ini = project_root / "alembic.ini"
    alembic_dir = project_root / "alembic"

    try:
        cfg = Config(str(alembic_ini)) if alembic_ini.exists() else Config()
        cfg.set_main_option("script_location", str(alembic_dir))
        if db_url:
            cfg.set_main_option("sqlalchemy.url", db_url)
        command.upgrade(cfg, "head")
        logger.info("‚úÖ Alembic migrations applied (head)")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Alembic failed ({e}). Fallback to Base.metadata.create_all()")
        Base.metadata.create_all(bind=engine)
        logger.info("‚úÖ Tables created via SQLAlchemy")

def seed_minimal_data():
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º 1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ 2 –¥–µ–ª–∞ —É –Ω–µ–≥–æ (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)."""
    admin_username = os.getenv("SEED_ADMIN_USERNAME", "admin")
    admin_password = os.getenv("SEED_ADMIN_PASSWORD", "admin")

    with SessionLocal() as db:
        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = db.query(User).filter(User.username == admin_username).first()
        if not user:
            user = User(
                username=admin_username,
                hashed_password=pwd_ctx.hash(admin_password),
            )
            db.add(user)
            db.flush()  # –ø–æ–ª—É—á–∏–º user.id –±–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–æ–º–º–∏—Ç–∞
            logger.info("üë§ Seed: created user 'admin'")
        else:
            logger.info("üë§ Seed: user 'admin' already exists")

        # –¥–µ–ª–∞ (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ —Ç–≤–æ–µ–π –º–æ–¥–µ–ª–∏)
        def ensure_case(case_number: str, iin: str):
            exists = db.query(CaseModel).filter(CaseModel.case_number == case_number).first()
            if exists:
                return
            c = CaseModel(
                case_number=case_number,
                user_id=user.id,
                surname="–ò–≤–∞–Ω–æ–≤",
                name="–ò–≤–∞–Ω",
                patronymic="–ò–≤–∞–Ω–æ–≤–∏—á",
                iin=iin,
                organization=None,
                investigator=None,
                registration_date=date.today(),
                qualification=None,
                damage_amount=None,
                income_amount=None,
                qualification_date=None,
                indictment_date=None,
            )
            db.add(c)
            logger.info(f"üìÑ Seed: created case {case_number}")

        ensure_case("CASE-0001", "000000000000")
        ensure_case("CASE-0002", "000000000001")
        db.commit()
        logger.info("‚úÖ Seed committed")

# --------- FastAPI app ---------

@asynccontextmanager
async def lifespan(app: FastAPI):
    logger.info("üîÑ App init: running migrations & seed...")
    run_migrations_or_create()
    seed_minimal_data()
    logger.info("üîÑ App init: initializing Weaviate...")
    initialize_weaviate()
    yield
    logger.info("üõë App shutdown")

# –í–ê–ñ–ù–û: —Ä–µ–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º lifespan
app = FastAPI(lifespan=lifespan)

# üîí –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/login")

# üì¶ –†–æ—É—Ç—ã
app.include_router(auth.router, tags=["Auth"])
app.include_router(cases.router, tags=["Cases"])
app.include_router(ml.router, tags=["ML"])

# üåç CORS
cors_origins = os.getenv("ALLOWED_ORIGINS", "http://localhost:3000").split(",")
app.add_middleware(
    CORSMiddleware,
    allow_origins=[o.strip() for o in cors_origins if o.strip()],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# üîê Swagger c bearer
def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema
    openapi_schema = get_openapi(
        title="AFM API",
        version="1.0.0",
        description="API for authentication and users",
        routes=app.routes,
    )
    openapi_schema["components"]["securitySchemes"] = {
        "OAuth2PasswordBearer": {
            "type": "http",
            "scheme": "bearer",
            "bearerFormat": "JWT",
        }
    }
    for path in openapi_schema["paths"]:
        for method in openapi_schema["paths"][path]:
            openapi_schema["paths"][path][method]["security"] = [{"OAuth2PasswordBearer": []}]
    app.openapi_schema = openapi_schema
    return app.openapi_schema

app.openapi = custom_openapi

# üöÄ –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–≤ –¥–æ–∫–µ—Ä–µ —Ç—ã —Å—Ç–∞—Ä—Ç—É–µ—à—å uvicorn —á–µ—Ä–µ–∑ CMD)
if __name__ == "__main__":
    import uvicorn
    host = os.getenv("BACKEND_HOST", "0.0.0.0")
    port = int(os.getenv("BACKEND_PORT", 8000))
    uvicorn.run("app.main:app", host=host, port=port, reload=False)
