import re
import logging
from typing import Dict, List, Callable

from .postanovlenie import chunk_postanovlenie, post_process_chunks as process_postanovlenie
from .zayablenie import chunk_zayavlenie, post_process_chunks as process_zayavlenie
from .dopros import chunk_dopros, post_process_chunks as process_dopros
from .protokol import chunk_protokol, post_process_chunks as process_protokol
from .default import chunk_common, post_process_chunks as process_default

logger = logging.getLogger(__name__)


def detect_doc_type(text: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º."""
    lowered = text.lower()

    if re.search(r"–ø—Ä–æ—Ç–æ–∫–æ–ª", lowered):
        logger.info("üìë –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–æ–ø—Ä–æ—Å–∞")
        return "–ø—Ä–æ—Ç–æ–∫–æ–ª"
    elif re.search(r"\b–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ\b", lowered):
        logger.info("üìë –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ (–≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ)")
        return "–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"
    elif "—Ä–∞–ø–æ—Ä—Ç" in lowered:
        logger.info("üìë –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: —Ä–∞–ø–æ—Ä—Ç ‚Üí –¥–æ–ø—Ä–æ—Å")
        return "–¥–æ–ø—Ä–æ—Å"
    elif re.search(r"\b–¥–æ–ø—Ä–æ—Å\b", lowered):
        logger.info("üìë –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: –¥–æ–ø—Ä–æ—Å")
        return "–¥–æ–ø—Ä–æ—Å"
    elif re.search(r"\b–∑–∞—è–≤–ª–µ–Ω–∏–µ\b", lowered):
        logger.info("üìë –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: –∑–∞—è–≤–ª–µ–Ω–∏–µ")
        return "–∑–∞—è–≤–ª–µ–Ω–∏–µ"
    elif re.search(r"\b–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ\b", lowered):
        logger.info("üìë –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ")
        return "–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"
    else:
        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø, fallback = –ø—Ä–æ—Ç–æ–∫–æ–ª")
        return "–ø—Ä–æ—Ç–æ–∫–æ–ª"


def chunk_by_filetype(
    text: str,
    filetype: str,
    document_id: int,
    case_id: int,
    user_id: int
) -> List[Dict]:
    """
    –í—ã–∑—ã–≤–∞–µ—Ç –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —á–∞–Ω–∫–∏–Ω–≥–∞ –ø–æ —Ç–∏–ø—É –¥–æ–∫—É–º–µ–Ω—Ç–∞.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç auto-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–µ–∫—Å—Ç—É.
    """
    filetype_original = filetype
    if not filetype or filetype.strip().lower() == "auto":
        filetype = detect_doc_type(text)
    else:
        filetype = filetype.strip().lower()
        logger.info(f"üìÇ –¢–∏–ø —Ñ–∞–π–ª–∞ –∑–∞–¥–∞–Ω —è–≤–Ω–æ: {filetype}")

    chunk_fn_map = {
        "–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ": chunk_postanovlenie,
        "–∑–∞—è–≤–ª–µ–Ω–∏–µ": chunk_zayavlenie,
        "–¥–æ–ø—Ä–æ—Å": chunk_dopros,
        "–ø—Ä–æ—Ç–æ–∫–æ–ª": chunk_protokol,
    }

    chunk_fn = chunk_fn_map.get(filetype, chunk_common)
    logger.debug(f"üß© –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—è —á–∞–Ω–∫–∏–Ω–≥–∞: {chunk_fn.__name__}")

    chunks = chunk_fn(text, filetype, document_id, case_id, user_id)

    processor = get_postprocessor(filetype)
    return processor(chunks)


def get_postprocessor(filetype: str) -> Callable[[List[Dict]], List[Dict]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–æ–≤."""
    filetype = filetype.strip().lower()

    processor_map = {
        "–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ": process_postanovlenie,
        "–∑–∞—è–≤–ª–µ–Ω–∏–µ": process_zayavlenie,
        "–¥–æ–ø—Ä–æ—Å": process_dopros,
        "–ø—Ä–æ—Ç–æ–∫–æ–ª": process_protokol,
    }

    processor = processor_map.get(filetype, process_default)
    logger.debug(f"üõ† –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞: {processor.__name__}")
    return processor
