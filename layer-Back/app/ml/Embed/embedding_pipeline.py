import logging
import traceback

from app.core.weaviate_client import save_to_weaviate, client
from app.ml.Embed.embedder import get_embedding
from app.ml.Embed.chunker import smart_chunk_document  # ‚úÖ –ø–æ–¥–∫–ª—é—á–∞–µ–º —É–º–Ω—ã–π —á–∞–Ω–∫–µ—Ä
from weaviate.classes.query import Filter
from app.ml.Embed.reranker import rerank_chunks  # ‚úÖ –ø–æ–¥–∫–ª—é—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π reranker

logger = logging.getLogger(__name__)

def index_full_document(
    title: str,
    text: str,
    filetype: str,
    user_id: int,
    case_id: int,
    document_id: int  # ‚ùóÔ∏è–¢–µ–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
):
    """–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –Ω–∞ —Å–º—ã—Å–ª–æ–≤—ã–µ —á–∞–Ω–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ Weaviate."""
    try:
        chunks = smart_chunk_document(
            text=text,
            user_id=user_id,
            case_id=case_id,
            document_id=document_id,  # ‚úÖ –ø–µ—Ä–µ–¥–∞—ë–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
            global_dedup=True
        )
        logger.info(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç '{title}' —Ä–∞–∑–±–∏—Ç –Ω–∞ {len(chunks)} —Å–º—ã—Å–ª–æ–≤—ã—Ö —á–∞–Ω–∫–æ–≤.")

        for i, chunk in enumerate(chunks):
            try:
                vector = get_embedding(chunk)
                if not vector:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –ø—É—Å—Ç–æ–π —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è —á–∞–Ω–∫–∞ {i+1}")
                    continue

                save_to_weaviate(
                    title=f"{title}_chunk_{i+1}",
                    text=chunk,
                    filetype=filetype,
                    case_id=case_id,
                    vector=vector,
                    document_id=document_id
                )
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —á–∞–Ω–∫–∞ {i+1} —Ñ–∞–π–ª–∞ '{title}': {str(e)}\n{traceback.format_exc()}")
                continue

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{title}': {str(e)}\n{traceback.format_exc()}")
        raise

def search_similar_chunks(query: str, case_id: int, k: int = 5) -> list[dict]:
    """–ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É —Å reranking –≤–Ω—É—Ç—Ä–∏ –¥–µ–ª–∞ (–ø–æ case_id)."""
    try:
        if not client.is_connected():
            logger.info("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Weaviate...")
            client.connect()

        # üîπ –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –∑–∞–ø—Ä–æ—Å–∞
        question_vector = get_embedding(query)

        # üîç –ó–∞–ø—Ä–æ—Å –∫ Weaviate
        collection = client.collections.get("Document")
        result = collection.query.near_vector(
            near_vector=question_vector,
            filters=Filter.by_property("case_id").equal(case_id),
            limit=15  # –ë–µ—Ä—ë–º –±–æ–ª—å—à–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        )

        raw_results = result.objects
        if not raw_results:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'")
            return []

        # üßπ –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É
        text_to_obj = {}
        for obj in raw_results:
            text = obj.properties.get("text")
            if text and text not in text_to_obj:
                text_to_obj[text] = obj.properties

        unique_texts = list(text_to_obj.keys())

        # üîÅ –†–µ—Ä–∞–Ω–∫–∏–Ω–≥ –ø–æ —Å–º—ã—Å–ª—É
        top_chunks = rerank_chunks(query, unique_texts, top_k=k)

        # üìé –í–æ–∑–≤—Ä–∞—Ç –æ—Ç—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        reranked_matches = [text_to_obj[text] for text in top_chunks if text in text_to_obj]

        logger.info(f"üîç –ü–æ—Å–ª–µ reranking –æ—Ç–æ–±—Ä–∞–Ω–æ {len(reranked_matches)} —á–∞–Ω–∫–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{query}'")
        return reranked_matches

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —á–∞–Ω–∫–æ–≤: {str(e)}\n{traceback.format_exc()}")
        return []
