import logging
import traceback

from app.core.weaviate_client import save_to_weaviate, client
from app.ml.Embed.embedder import get_embedding
from app.ml.Embed.chunker import smart_chunk_document  # ‚Üê —Ç–≤–æ–π —É–º–Ω—ã–π —á–∞–Ω–∫–µ—Ä
from weaviate.classes.query import Filter

logger = logging.getLogger(__name__)

def index_full_document(title: str, text: str, filetype: str, case_id: int, document_id: int | None = None):
    """–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –Ω–∞ —Å–º—ã—Å–ª–æ–≤—ã–µ —á–∞–Ω–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ Weaviate."""
    try:
        chunks = smart_chunk_document(text)
        logger.info(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç '{title}' —Ä–∞–∑–±–∏—Ç –Ω–∞ {len(chunks)} —Å–º—ã—Å–ª–æ–≤—ã—Ö —á–∞–Ω–∫–æ–≤.")

        for i, chunk in enumerate(chunks):
            try:
                vector = get_embedding(chunk)
                if not vector:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –ø—É—Å—Ç–æ–π —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è —á–∞–Ω–∫–∞ {i+1}")
                    continue

                save_to_weaviate(
                    title=f"{title}_chunk_{i+1}",
                    text=chunk,
                    filetype=filetype,
                    case_id=case_id,
                    vector=vector,
                    document_id=document_id
                )
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —á–∞–Ω–∫–∞ {i+1} —Ñ–∞–π–ª–∞ '{title}': {str(e)}\n{traceback.format_exc()}")
                continue

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{title}': {str(e)}\n{traceback.format_exc()}")
        raise


def search_similar_chunks(query: str, case_id: int, k: int = 5) -> list[dict]:
    """–ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ –ø–æ –≤–æ–ø—Ä–æ—Å—É –∏ –¥–µ–ª—É (case_id)."""
    try:
        if not client.is_connected():
            logger.info("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Weaviate...")
            client.connect()

        question_vector = get_embedding(query)

        collection = client.collections.get("Document")
        result = collection.query.near_vector(
            near_vector=question_vector,
            filters=Filter.by_property("case_id").equal(case_id),
            limit=k
        )

        matches = [obj.properties for obj in result.objects]
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –≤–æ–ø—Ä–æ—Å—É: '{query}'")
        return matches

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —á–∞–Ω–∫–æ–≤: {str(e)}\n{traceback.format_exc()}")
        return []
