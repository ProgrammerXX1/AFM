from app.ml.chunker import split_text_to_chunks
from app.ml.embedder import get_embedding
from app.ml.weaviate_client import save_to_weaviate, client

def index_full_document(title: str, text: str, filetype: str, case_id: int):
    """–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –Ω–∞ —á–∞–Ω–∫–∏."""
    try:
        if not client.is_connected():
            print("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Weaviate...")
            client.connect()

        chunks = split_text_to_chunks(text)
        chunk_count = len(chunks)
        print(f"üìë –†–∞–∑–±–∏—Ç–æ –Ω–∞ {chunk_count} —á–∞–Ω–∫–æ–≤ –¥–ª—è —Ñ–∞–π–ª–∞ {title}")

        for i, chunk in enumerate(chunks):
            try:
                vector = get_embedding(chunk)
                save_to_weaviate(
                    title=f"{title}_chunk_{i+1}",
                    text=chunk,
                    filetype=filetype,
                    case_id=case_id,
                    vector=vector
                )
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —á–∞–Ω–∫–∞ {i+1} —Ñ–∞–π–ª–∞ {title}: {str(e)}")
                continue
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {title}: {str(e)}")
        raise

from weaviate.classes.query import Filter

def search_similar_chunks(question: str, case_id: int, k: int = 5):
    """–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —á–∞–Ω–∫–æ–≤ –ø–æ –≤–æ–ø—Ä–æ—Å—É –∏ case_id."""
    try:
        if not client.is_connected():
            print("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Weaviate...")
            client.connect()

        question_vector = get_embedding(question)
        collection = client.collections.get("Document")

        result = collection.query.near_vector(
            near_vector=question_vector,
            filters=Filter.by_property("case_id").equal(case_id),
            limit=k
        )

        return [obj.properties for obj in result.objects]

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —á–∞–Ω–∫–æ–≤: {str(e)}")
        return []
