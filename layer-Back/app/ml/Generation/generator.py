import os
import requests
import logging
from typing import List, Dict
from app.ml.Generation.retriever import hybrid_search

logger = logging.getLogger(__name__)

GENERATOR_URL = os.getenv("GENERATOR_URL")
GENERATOR_MODEL = os.getenv("GENERATOR_MODEL")

SYSTEM_PROMPT = (
    "–¢—ã ‚Äî —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ –†–µ—Å–ø—É–±–ª–∏–∫–µ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.–û—Ç–≤–µ—á–∞–π –æ—Ç —Å–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏. "
    "–ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ —É–≥–æ–ª–æ–≤–Ω–æ–≥–æ –¥–µ–ª–∞ —Å–æ—Å—Ç–∞–≤—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç ‚Äî "
    "¬´–ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–µ—è–Ω–∏—è –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ¬ª. "
    "–ü–∏—à–∏ —Å—Ç—Ä–æ–≥–æ –∫–∞–∫ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å, —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –¥–µ–ª–æ–≤–æ–≥–æ, –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ-—é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–∏–ª—è. "
    "–ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã —É–≥–æ–ª–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è. "
    "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π –∏ –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç–æ–≤ ‚Äî —Ä–∞–±–æ—Ç–∞–π —Ç–æ–ª—å–∫–æ —Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º.\n\n"

    "–§–æ—Ä–º–∞—Ç:\n"
    "1. –ó–∞–≥–æ–ª–æ–≤–æ–∫: ¬´–ü–û–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –æ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–µ—è–Ω–∏—è –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ¬ª\n"
    "2. –î–∞—Ç–∞, –≥–æ—Ä–æ–¥, –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏ –§–ò–û —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è\n"
    "3. –†–∞–∑–¥–µ–ª ¬´–£–°–¢–ê–ù–û–í–ò–õ¬ª ‚Äî –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤ –∏ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤\n"
    "4. –†–∞–∑–¥–µ–ª ¬´–ü–û–°–¢–ê–ù–û–í–ò–õ¬ª ‚Äî —É–∫–∞–∑–∞–Ω–∏–µ –¥–µ—è–Ω–∏–π(–µ–π)\n"
    "5. –ü–æ–¥–ø–∏—Å—å —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è —Å –¥–æ–ª–∂–Ω–æ—Å—Ç—å—é, –§–ò–û, –∏ –≤–æ–∑–º–æ–∂–Ω—ã–π QR-–∫–æ–¥, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å\n\n"

    "–ï—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ –±–ª–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–µ ‚Äî –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π –µ–≥–æ –∏ –Ω–µ –≤—Å—Ç–∞–≤–ª—è–π –∑–∞–≥–ª—É—à–∫–∏. "
    "–û—Ñ–æ—Ä–º–ª—è–π –∫–∞–∫ –≥–æ—Ç–æ–≤—ã–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç. "
    "–°–æ–±–ª—é–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å—Ç–∏–ª—å, –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –∏–∑ –ò–° ¬´–ï–¥–∏–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä –¥–æ—Å—É–¥–µ–±–Ω—ã—Ö —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π¬ª."
)


def build_context(chunks: List[Dict]) -> str:
    result = []
    for chunk in chunks:
        if isinstance(chunk, dict) and "text" in chunk:
            title = chunk.get("title", "–§—Ä–∞–≥–º–µ–Ω—Ç")
            chunk_type = chunk.get("chunk_type", "unknown")
            text = chunk["text"].strip()
            if text:
                result.append(f"{title} ({chunk_type}):\n{text}")
    return "\n\n".join(result)


def generate_investigation_plan(case_id: int) -> str:
    try:
        query = "–°–æ—Å—Ç–∞–≤—å –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É–≥–æ–ª–æ–≤–Ω–æ–≥–æ –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏—è"
        chunks = hybrid_search(case_id=case_id, query=query, top_k=5)

        if not chunks:
            logger.warning("‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω–æ —á–∞–Ω–∫–æ–≤ –ø–æ –¥–µ–ª—É")
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è."

        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(chunks)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤")
        for i, ch in enumerate(chunks):
            logger.debug(f"Chunk {i+1}: [{ch.get('chunk_type')}] {ch.get('text', '')[:400]}...")

        context = build_context(chunks)

        full_prompt = (
            f"{SYSTEM_PROMPT}\n\n"
            f"–í–æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã —É–≥–æ–ª–æ–≤–Ω–æ–≥–æ –¥–µ–ª–∞:\n\n{context}\n\n"
            f"–°–æ—Å—Ç–∞–≤—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É–≥–æ–ª–æ–≤–Ω–æ–≥–æ –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º."
        )

        payload = {
            "model": GENERATOR_MODEL,
            "prompt": full_prompt,
            "stream": False
        }

        logger.debug(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Ollama ({GENERATOR_URL}): {GENERATOR_MODEL}")
        response = requests.post(GENERATOR_URL, json=payload)
        response.raise_for_status()

        result = response.json()
        return result.get("response", "").strip()

    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏: {e}")
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å –º–æ–¥–µ–ª—å—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
