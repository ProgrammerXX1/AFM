import os
from typing import List, Dict
from app.core.weaviate_client import client  # ‚Üê –∏–º–ø–æ—Ä—Ç –∫–ª–∏–µ–Ω—Ç–∞
from app.ml.Embed.reranker import rerank_chunks
from app.ml.Embed.embedder import get_embedding
from weaviate.classes.query import Filter
from app.ml.Embed.chunker.postprocess import generic_post_process_for_rerank
def hybrid_search(case_id: int, query: str, top_k: int = 15) -> List[Dict]:
    """
    –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫: –≤–µ–∫—Ç–æ—Ä–Ω—ã–π (semantic) + BM25 + reranker.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç reranked top-k —á–∞–Ω–∫–æ–≤ –ø–æ —Å–º—ã—Å–ª–æ–≤–æ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏.
    """

    if not client.is_connected():
        client.connect()

    collection = client.collections.get("Document")
    filter_by_case = Filter.by_property("case_id").equal(case_id)

    # üîπ 1. Semantic search (vector)
    try:
        query_vector = get_embedding(query)
        semantic_results = collection.query.near_vector(
            near=query_vector,
            filters=filter_by_case,
            limit=top_k * 2
        ).objects
        semantic_chunks = [obj.properties for obj in semantic_results]
    except Exception:
        semantic_chunks = []

    # üî∏ 2. BM25 fallback
    try:
        bm25_results = collection.query.bm25(
            query=query,
            filters=filter_by_case,
            limit=top_k * 2
        ).objects
        bm25_chunks = [obj.properties for obj in bm25_results]
    except Exception:
        bm25_chunks = []

    # üîÄ 3. –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ `semantic_hash`
    combined_dict = {}
    for chunk in semantic_chunks + bm25_chunks:
        hash_key = chunk.get("semantic_hash") or chunk.get("hash")
        if hash_key and hash_key not in combined_dict:
            combined_dict[hash_key] = chunk

    combined_chunks = list(combined_dict.values())

    # üî• 4. Reranking
    # üßπ –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ —à–∞–±–ª–æ–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ –¥–æ rerank'–∞
    print(f"\nüß™ –ü–µ—Ä–µ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π: {len(combined_chunks)} —á–∞–Ω–∫–æ–≤")
    filtered_chunks = generic_post_process_for_rerank(combined_chunks)
    print(f"üß™ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(filtered_chunks)} —á–∞–Ω–∫–æ–≤")
    # üß† Rerank —É–∂–µ –æ—á–∏—â–µ–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
    for i, chunk in enumerate(filtered_chunks):
        print(f"\n[{i+1}] type={chunk.get('chunk_type')} | text[:200]:\n{chunk['text'][:200]}")
    reranked = rerank_chunks(query, filtered_chunks, top_k=top_k)

    return reranked
